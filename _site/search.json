[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data<-read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-class_Ex/In-class Exercise4/In-class Exercise 4.html",
    "href": "In-class_Ex/In-class Exercise4/In-class Exercise 4.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "pacman::p_load(plotly, DT, patchwork, readxl, ggstatsplot,performance, parameters, see, tidyverse)\n\n\nexam_data <-read_csv(\"data/Exam_data.csv\")\n\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\nggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\nggbetweenstats(\n  data = exam_data,\n  x=GENDER,\n  y=MATHS,\n  type = \"p\",\n  messages=FALSE\n)\n\n\n\n\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE,\n  )\n\n\n\n\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\n\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n <- check_normality(model1)\nplot(check_n)\n\n\n\n\n\nmy_sum <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5)+\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03.html",
    "title": "In-class Exercise",
    "section": "",
    "text": "Installing and loading R packages\nTwo packages will be installed and loaded. They are : tidyverse and ggiraph.\n\npacman::p_load(ggiraph,tidyverse)\n\nimporting data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nggplot(data = exam_data,aes(x=MATHS)) +geom_dotplot(dotsize = 0.5)\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/TakeHome_Ex01/Take-Home_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "The task is to use age-sex pyramids to reveal the demographic structure of SG at the planning area level, describe the step-by-step preparation, and interpret the observations revealed by the data visualization prepared.\nThe data source of visualization is Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022. The data are available under the page entitled Geographical distribution.\nHere are some notes about the data:\nPA - Planning Area\nSZ – Subzone\nAG - Age Group\nSex – Sex\nTOD - Type of Dwelling\nPop - Resident Count\nTime - Time / Period"
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html",
    "href": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html",
    "title": "Take Home Exercise 02",
    "section": "",
    "text": "Remaking peer’s original design by improving chart’s clarity and aesthetics and creating an alternative design if needed."
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#original-design",
    "href": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#original-design",
    "title": "Take Home Exercise 02",
    "section": "2.1 Original Design",
    "text": "2.1 Original Design\nThe original design is shown below:\n\n  As we all known, the task of Take-home exercise 1 is to reveal the demographic structure of Singapore at planning area level by using age-sex pyramid method. The above design showed the demographic structure successfully. Yet, this design can be improved in terms of following criteria."
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#clarity",
    "href": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#clarity",
    "title": "Take Home Exercise 02",
    "section": "2.2 Clarity",
    "text": "2.2 Clarity\n\n(a) Graph Title\nThe graph title can deliver the information clearly. But I think it is a bit too long. Maybe can be shorter. For example, can name it as SG Age-Sex Population Pyramids. We don’t need to say again we choose nine area because we showed nine pyramids."
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#b-axes-labeling",
    "href": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#b-axes-labeling",
    "title": "Take Home Exercise 02",
    "section": "(b) Axes Labeling",
    "text": "(b) Axes Labeling\nThe design did not add the axes labels. It would bring some misunderstanding about the data. So I think we can add the “Age” on the left side and the “Population” on the bottom side. It also added the gender labels on the bottom side and I think it’s good because it can bring a clear information about the gender differences.\nFor every pyramid, it has been added the area name label, which is very clear to show the specific area’s situation."
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#aesthetics",
    "href": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#aesthetics",
    "title": "Take Home Exercise 02",
    "section": "2.3 Aesthetics",
    "text": "2.3 Aesthetics\n\n(a) Alignment- Graph Title\nIn my opinion, the title aligning the pyramid area would be better than aligning the left side of the view.\n\n\n(b) The texts of population amount\nWhen you point to one of the pyramids, it would show the amount of population automatically. So I think the text of the number can be removed.\n\n\n(c) The display sequence of pyramids\nThe take-home exercise 1 requires us to display the nine pyramids on one view by using trellis display but this design needs us to use the scrolling bar to see the whole view. It’s not really fit for the requirement."
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#sketch-of-proposed-design",
    "href": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#sketch-of-proposed-design",
    "title": "Take Home Exercise 02",
    "section": "2.4 Sketch of Proposed Design",
    "text": "2.4 Sketch of Proposed Design"
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#step-by-step-description",
    "href": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#step-by-step-description",
    "title": "Take Home Exercise 02",
    "section": "3.1 Step by step description",
    "text": "3.1 Step by step description\n1) Installing and loading R packages. Three packages will be installed and loaded. They are : ggiraph, tidyverse and readxl.\n\npacman::p_load(ggiraph,tidyverse,readxl)\n\n2) Importing data. Data import was accomplished using read_csv() of the readr package.\n\npop <- read_csv(\"data/respopagesextod2022.csv\")\n\n3) Read the head data:\n\nhead(pop)\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2022\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2022\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       10  2022\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    30  2022\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2022\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Condominiums and O…    50  2022\n\n\n4) First, we need to calculate the frequency count of the total population in Singapore by gender(Sex), age(AG), and planning area(PA). In the code chunk, we can use group_by() to group the orders by age, gender, and planning area. Afrer that, we can use summarise() of dplyr package to compute the amount of residents.\n\nfreq_pop <- pop %>%\n  group_by(`AG`, `Sex`,`PA`) %>%\n  summarise('Count'= sum(`Pop`)) %>%\n  ungroup()\nhead(freq_pop)\n\n# A tibble: 6 × 4\n  AG     Sex     PA          Count\n  <chr>  <chr>   <chr>       <dbl>\n1 0_to_4 Females Ang Mo Kio   2480\n2 0_to_4 Females Bedok        4970\n3 0_to_4 Females Bishan       1320\n4 0_to_4 Females Boon Lay        0\n5 0_to_4 Females Bukit Batok  4400\n6 0_to_4 Females Bukit Merah  2800\n\n\n5) We need to sort the data based on the categorical age group assigned in the original dataset. We can use mutate() to change the order and then use arrange() of dplyr package to sort. And then display the hold table.\n\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsorted_pop <- freq_pop %>%\n  mutate(AG =  factor(AG, levels = order)) %>%\n  arrange(AG)\n  \nsorted_pop\n\n# A tibble: 2,090 × 4\n   AG     Sex     PA                      Count\n   <fct>  <chr>   <chr>                   <dbl>\n 1 0_to_4 Females Ang Mo Kio               2480\n 2 0_to_4 Females Bedok                    4970\n 3 0_to_4 Females Bishan                   1320\n 4 0_to_4 Females Boon Lay                    0\n 5 0_to_4 Females Bukit Batok              4400\n 6 0_to_4 Females Bukit Merah              2800\n 7 0_to_4 Females Bukit Panjang            2730\n 8 0_to_4 Females Bukit Timah              1750\n 9 0_to_4 Females Central Water Catchment     0\n10 0_to_4 Females Changi                     60\n# … with 2,080 more rows\n\n\n6) Because the take-home exercise needs us to choose nine planning areas. So, base on the original design, I choose “Ang Mo Kio”, “Bukit Merah”, “Bukit Timah”, “Hougang”, “Jurong East”, “Kallang”, “Pasir Ris”, “Sengkang”, “Toa Payoh” nine planning areas. And then display the whole table of nine planning areas.\n\nPA_sorted_pop <- filter(sorted_pop,PA %in% c(\"Ang Mo Kio\",\"Bukit Merah\",\"Bukit Timah\",\"Hougang\",\"Jurong East\",\"Kallang\",\"Pasir Ris\",\"Sengkang\",\"Toa Payoh\"))\nPA_sorted_pop\n\n# A tibble: 342 × 4\n   AG     Sex     PA          Count\n   <fct>  <chr>   <chr>       <dbl>\n 1 0_to_4 Females Ang Mo Kio   2480\n 2 0_to_4 Females Bukit Merah  2800\n 3 0_to_4 Females Bukit Timah  1750\n 4 0_to_4 Females Hougang      4430\n 5 0_to_4 Females Jurong East  1130\n 6 0_to_4 Females Kallang      1810\n 7 0_to_4 Females Pasir Ris    2730\n 8 0_to_4 Females Sengkang     6900\n 9 0_to_4 Females Toa Payoh    2550\n10 0_to_4 Males   Ang Mo Kio   2530\n# … with 332 more rows"
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#plot-age-sex-population-pyramid",
    "href": "Take-Home_Ex/TakeHome_Ex02/TakeHome_Ex02.html#plot-age-sex-population-pyramid",
    "title": "Take Home Exercise 02",
    "section": "3.1.1 Plot Age-Sex Population Pyramid",
    "text": "3.1.1 Plot Age-Sex Population Pyramid\nStatic Age-sex population pyramid\n1) Using ggplot2 to plot the age-sex population pyramid.\n2) Changed the color of the bar chart depending on the original design.\n\ngeom_col() used to create the bar chart.\nifelse() of Base R function was convert population count of Male residents to be negative, so that their data will be plotted on the left side of the pyramid.\nfacet_wrap() Used to display nine planing area’s pyramids on the one view .\nChanged the color to green for males and light-pink for females.\n\n\np <- ggplot(PA_sorted_pop, aes(x = ifelse(Sex == \"Males\", yes = -Count, no = Count), \n                          y = AG, fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(breaks = seq(-150000, 150000, 50000), \n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))),\"k\")) +\n  labs (x = \"Population\", y = \"Age\", title='Singapore Age-Sex Population Pyramid 2022') +\n  theme_bw() +\n  theme(axis.ticks.y = element_blank()) +\n  scale_fill_manual(values = c(\"Males\" = \"#7b8b6f\", \"Females\" = \"lightpink\"))+\n  facet_wrap(~ PA)\np\n\n\n\n\n\nIn order to convert the static pyramid to an interactive chart, we can use ggplotly() of the plotly library. After using this package, hoving your mouse on the bar, you can see the detail information of the different ages and genders. We also need to use fig.width and fig.height to adjust the height and width.\n\n\nlibrary(plotly)\nggplotly(p,session=\"knitr\")"
  },
  {
    "objectID": "Hands-on_Ex/hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "pacman::p_load(ggiraph, plotly, gganimate, DT, tidyverse, patchwork)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nComparing ggplot2 and ggiraph codes\nThe original ggplot2 code chunk.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5, \n               dotsize = 0.5) +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              #<<\n    aes(tooltip = ID),                   #<<\n    stackgroups = TRUE,                  #<<\n    binwidth = 1,                        #<<\n    method = \"histodot\") +               #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  #<<\n  ggobj = p,                             #<<\n  width_svg = 6,                         #<<\n  height_svg = 6*0.618                   #<<   \n)                                        #<<\n\n\n\n\n\n\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:blue;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\n\n\n\n\n\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #<<\n} #<<\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #<<\n} #<<\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n)+\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  )+\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        #<<\n    opts_hover(css = \"fill: #301085;\"),  #<<\n    opts_hover_inv(css = \"opacity:0.1;\") #<<\n  )                                      #<<  \n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05.html",
    "title": "In-class_Ex05",
    "section": "",
    "text": "pacman::p_load(corrplot, tidyverse, ggstatsplot,corrgram, ellipse,ggcorrplot,  seriation, dendextend, heatmaply)\n\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npairs(wine[,1:11])\n\n\n\n\n\npairs(wine[,2:12])\n\n\n\n\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n\n\n\n\n\nwine.cor <- cor(wine[, 1:11])\n\n\ncorrplot(wine.cor)\n\n\n\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\nRows: 108126 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): PA, SZ, AG\ndbl (2): Year, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npacman::p_load(ggtern, plotly, tidyverse,dplyr_col_modify())\n\nInstalling package into 'C:/Users/Jiajie/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n\n\nWarning: package 'dplyr_col_modify()' is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\nWarning: 'BiocManager' not available.  Could not check Bioconductor.\n\nPlease use `install.packages('BiocManager')` and then retry.\n\n\nWarning in p_install(package, character.only = TRUE, ...):\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE,\nlogical.return = TRUE, : there is no package called 'dplyr_col_modify()'\n\n\nWarning in pacman::p_load(ggtern, plotly, tidyverse, dplyr_col_modify()): Failed to install/load:\ndplyr_col_modify()\n\n\n\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  pivot_wider(names_from = AG, \n              values_from = Population) %>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)\n\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex03/TakeHome_Ex03.html",
    "href": "Take-Home_Ex/TakeHome_Ex03/TakeHome_Ex03.html",
    "title": "TakeHome_Ex03",
    "section": "",
    "text": "In this take-home exercise, I need to uncover the salient patterns of the resale prices of public housing. We need to focus on 3-Room, 4-Room, and 5-room types. I would focus on different factors’ influence on resale price and after that, I would focus on analyzing the resale price from one type of house."
  },
  {
    "objectID": "Take-Home_Ex/TakeHome_Ex03/TakeHome_Ex03.html#creating-the-visualisation",
    "href": "Take-Home_Ex/TakeHome_Ex03/TakeHome_Ex03.html#creating-the-visualisation",
    "title": "TakeHome_Ex03",
    "section": "4. Creating the Visualisation",
    "text": "4. Creating the Visualisation\n4.1 I want to compare differnt house type’s resale_price’s median. But I need to decrease the influence of house size. So, I create one more column to store the average price/m² and named it AvgPrice.\n\nFlat_resale4 <- mutate(Flat_resale3,AvgPrice=resale_price/floor_area_sqm)\nFlat_resale4\n\n# A tibble: 24,372 × 13\n   year  months town       flat_…¹ block stree…² store…³ floor…⁴ flat_…⁵ lease…⁶\n   <chr> <chr>  <chr>      <chr>   <chr> <chr>   <chr>     <dbl> <chr>     <dbl>\n 1 2022  01     ANG MO KIO 3 ROOM  320   ANG MO… 07 TO …      73 New Ge…    1977\n 2 2022  01     ANG MO KIO 3 ROOM  225   ANG MO… 07 TO …      67 New Ge…    1978\n 3 2022  01     ANG MO KIO 3 ROOM  331   ANG MO… 07 TO …      68 New Ge…    1981\n 4 2022  01     ANG MO KIO 3 ROOM  534   ANG MO… 07 TO …      82 New Ge…    1980\n 5 2022  01     ANG MO KIO 3 ROOM  578   ANG MO… 04 TO …      67 New Ge…    1980\n 6 2022  01     ANG MO KIO 3 ROOM  452   ANG MO… 01 TO …      83 New Ge…    1979\n 7 2022  01     ANG MO KIO 3 ROOM  560   ANG MO… 01 TO …      67 New Ge…    1980\n 8 2022  01     ANG MO KIO 3 ROOM  435   ANG MO… 04 TO …      67 New Ge…    1979\n 9 2022  01     ANG MO KIO 3 ROOM  435   ANG MO… 04 TO …      67 New Ge…    1979\n10 2022  01     ANG MO KIO 3 ROOM  560   ANG MO… 10 TO …      67 New Ge…    1980\n# … with 24,362 more rows, 3 more variables: remaining_lease <chr>,\n#   resale_price <dbl>, AvgPrice <dbl>, and abbreviated variable names\n#   ¹​flat_type, ²​street_name, ³​storey_range, ⁴​floor_area_sqm, ⁵​flat_model,\n#   ⁶​lease_commence_date\n\n\n4.2 Two-sample mean test:\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of AvgPrice by house types.\n\nggbetweenstats(\n  data = Flat_resale4,\n  x =flat_type, \n  y =AvgPrice,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nFrom above chart, it is easy to find that 4-room’s AvgPrice is higher than others. It means in the same house size, 4-room house would more expensive than others and the 3-room house is more expensive than 5-room house.\n4.3 checking normality assumption between AvgPrice and storey_range.\n\nmodel1 <- lm(AvgPrice ~storey_range , data = Flat_resale4)\nmodel1\n\n\nCall:\nlm(formula = AvgPrice ~ storey_range, data = Flat_resale4)\n\nCoefficients:\n         (Intercept)  storey_range04 TO 06  storey_range07 TO 09  \n              5106.2                 261.4                 436.5  \nstorey_range10 TO 12  storey_range13 TO 15  storey_range16 TO 18  \n               579.2                 961.1                1408.3  \nstorey_range19 TO 21  storey_range22 TO 24  storey_range25 TO 27  \n              2216.9                2392.7                3195.6  \nstorey_range28 TO 30  storey_range31 TO 33  storey_range34 TO 36  \n              4190.4                4464.2                4694.2  \nstorey_range37 TO 39  storey_range40 TO 42  storey_range43 TO 45  \n              5026.1                5701.7                7022.4  \nstorey_range46 TO 48  storey_range49 TO 51  \n              7892.7                7858.3  \n\n\n\ncheck_n <- check_normality(model1)\n\n\nplot(check_n)\n\n\n\n\n4.4 Oneway ANOVA Test: Do a ANOVA Test to verify that is there any difference in AvgPrice based on different storeys.\nH0: There is irrelevant between AvgPrice and storey_range.\nH1: There is relevant between AvgPrice and storey_range.\n\nggbetweenstats(\n  data = Flat_resale4,\n  x = storey_range, \n  y = AvgPrice,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\nWarning: Number of labels is greater than default palette color count.\n• Select another color `palette` (and/or `package`).\n\n\n\n\n\nFrom above result, we can see that P<0.05. So we can reject H0. So, AvgPrice depends on the floor. The height of the floor affects the average price.\n4.5 In order to explore the\nSignificant Test of Association (Depedence) : ggbarstats() methods\n\nexam1 <- Flat_resale4 %>% \n  mutate(AvgPrice_bin = \n           cut(AvgPrice, \n               breaks = c(0,2000,4000,6000,8000))\n)\n\n\nggbarstats(exam1, \n           x = AvgPrice_bin, \n           y = storey_range)\n\n\n\n\nIn order to 单一房型的关系：取四房的\n\nFlat_resale5 <- filter(Flat_resale4,flat_type==\"4 ROOM\")\nFlat_resale5\n\n# A tibble: 11,311 × 13\n   year  months town       flat_…¹ block stree…² store…³ floor…⁴ flat_…⁵ lease…⁶\n   <chr> <chr>  <chr>      <chr>   <chr> <chr>   <chr>     <dbl> <chr>     <dbl>\n 1 2022  01     ANG MO KIO 4 ROOM  438   ANG MO… 10 TO …      92 New Ge…    1979\n 2 2022  01     ANG MO KIO 4 ROOM  556   ANG MO… 13 TO …      92 New Ge…    1980\n 3 2022  01     ANG MO KIO 4 ROOM  419   ANG MO… 07 TO …      99 New Ge…    1979\n 4 2022  01     ANG MO KIO 4 ROOM  466   ANG MO… 04 TO …      93 New Ge…    1984\n 5 2022  01     ANG MO KIO 4 ROOM  472   ANG MO… 01 TO …      92 New Ge…    1979\n 6 2022  01     ANG MO KIO 4 ROOM  405   ANG MO… 01 TO …      92 New Ge…    1979\n 7 2022  01     ANG MO KIO 4 ROOM  547   ANG MO… 01 TO …      92 New Ge…    1981\n 8 2022  01     ANG MO KIO 4 ROOM  415   ANG MO… 01 TO …      92 New Ge…    1979\n 9 2022  01     ANG MO KIO 4 ROOM  324   ANG MO… 04 TO …      98 New Ge…    1978\n10 2022  01     ANG MO KIO 4 ROOM  121   ANG MO… 10 TO …      92 New Ge…    1978\n# … with 11,301 more rows, 3 more variables: remaining_lease <chr>,\n#   resale_price <dbl>, AvgPrice <dbl>, and abbreviated variable names\n#   ¹​flat_type, ²​street_name, ³​storey_range, ⁴​floor_area_sqm, ⁵​flat_model,\n#   ⁶​lease_commence_date\n\n\n不同地区房价的中位数\n\nFlat_resale6 <- Flat_resale5 %>%\n                group_by(town) %>%\n                summarize(median_price = median(resale_price))\nFlat_resale6\n\n# A tibble: 26 × 2\n   town          median_price\n   <chr>                <dbl>\n 1 ANG MO KIO          513000\n 2 BEDOK               470000\n 3 BISHAN              640000\n 4 BUKIT BATOK         495000\n 5 BUKIT MERAH         750000\n 6 BUKIT PANJANG       470000\n 7 BUKIT TIMAH         618444\n 8 CENTRAL AREA        849044\n 9 CHOA CHU KANG       488000\n10 CLEMENTI            660000\n# … with 16 more rows\n\n\n\nggplot(data=Flat_resale6,aes(x=reorder(town,median_price),y=median_price))+\n      geom_bar(stat = \"identity\")\n\n\n\n\nModel Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\narea_price <- lm(floor_area_sqm ~resale_price , data = Flat_resale5)\n\n\ncheck_n <- check_normality(area_price)\n\n\nplot(check_n)\n\n\n\n\n\nggscatterstats(\n  data = Flat_resale5,\n  x =floor_area_sqm ,\n  y = resale_price,\n  marginal = FALSE,\n  )"
  }
]